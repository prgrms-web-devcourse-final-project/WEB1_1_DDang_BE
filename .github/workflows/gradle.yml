name: ddang CD

on:
  push:
    branches: [ "fix/#61-github-action-fix" ]

permissions: write-all

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  setup:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.0.0

      - name: Make application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          touch ./application-oauth.yml
          touch ./application-jwt.yml
          touch ./application-dep.yml
          
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
          echo "${{ secrets.APPLICATION_DEP_YML }}" > ./application-dep.yml
          echo "${{ secrets.APPLICATION_JWT_YML }}" > ./application-jwt.yml
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" > ./application-oauth.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Docker build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/ddang .
          docker push ${{ secrets.DOCKER_REPO }}/ddang

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker pull ${{ secrets.DOCKER_REPO }}/ddang
            docker run -d --name ddang -p 8080:8080 ${{ secrets.DOCKER_REPO }}/ddang
