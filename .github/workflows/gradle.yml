# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ddang CD

on:
  push:
    branches: [ "fix/#61-github-action-fix" ]

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
    
    # - name: Set YML
    #   uses: microsoft/variable-substitution@v1
    #   with:
    #     files: ./src/main/resources/application-prod.yml
    #   env:
    #     spring.datasource.url: ${{ secrets.DB_URL }}
    #     spring.datasource.username: ${{ secrets.DB_USERNAME }}
    #     spring.datasource.password: ${{ secrets.DB_PASSWORD }}
    #     spring.data.redis.port: ${{ secrets.REDIS_PORT }}
    #     spring.data.redis.host: ${{ secrets.REDIS_HOST }}
    #     spring.mail.username: ${{ secrets.MAIL_USERNAME }}
    #     spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
    #     jwt.secret: ${{ secrets.JWT_SECRET_KEY }}

    - name: Make application.yml
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.yml
        touch ./application-oauth.yml
        touch ./application-jwt.yml
        touch ./application-dep.yml
        
        echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        echo "${{ secrets.APPLICATION_DEP_YML }}" > ./application-dep.yml
        echo "${{ secrets.APPLICATION_JWT_YML }}" > ./application-jwt.yml
        echo "${{ secrets.APPLICATION_OAUTH_YML }}" > ./application-oauth.yml
      shell: bash

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0
      
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build -x test

    - name: Docker build & Push
      run: | 
        docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/ddang .
        docker push ${{ secrets.DOCKER_REPO }}/ddang
   
   #docker-compose 파일을 ec2 서버에 배포
    - name: Deploy to Prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
             sudo docker pull ${{ secrets.DOCKER_REPO }}/ddang
             docker run -d --name ddang -p 8080:8080 ${{ secrets.DOCKER_REPO }}/ddang
